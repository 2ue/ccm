import { Command } from 'commander'
import chalk from 'chalk'
import inquirer from 'inquirer'
import { createClaudeCodeManager, ProviderNotFoundError } from '@ccman/core'

export function editCommand(program: Command): void {
  program
    .command('edit [name]')
    .description('编辑 Claude Code 服务商')
    .action(async (name?: string) => {
      try {
        const manager = createClaudeCodeManager()
        const providers = manager.list()

        if (providers.length === 0) {
          console.log(chalk.yellow('\n⚠️  暂无 Claude Code 服务商\n'))
          return
        }

        let targetId: string

        if (name) {
          const provider = manager.findByName(name)
          if (!provider) {
            throw new ProviderNotFoundError(name)
          }
          targetId = provider.id
        } else {
          // 交互式选择
          const { selectedId } = await inquirer.prompt([
            {
              type: 'list',
              name: 'selectedId',
              message: '选择要编辑的服务商:',
              choices: providers.map((p) => ({
                name: `${p.name} - ${p.baseUrl}`,
                value: p.id,
              })),
            },
          ])
          targetId = selectedId
        }

        const provider = manager.get(targetId)

        console.log(chalk.bold('\n✏️  编辑服务商\n'))
        console.log(chalk.gray('提示: 留空则保持原值\n'))

        const answers = await inquirer.prompt([
          {
            type: 'input',
            name: 'name',
            message: '服务商名称:',
            default: provider.name,
          },
          {
            type: 'input',
            name: 'baseUrl',
            message: 'API 地址:',
            default: provider.baseUrl,
            validate: (value) => {
              if (value && !value.startsWith('http://') && !value.startsWith('https://')) {
                return 'API 地址必须以 http:// 或 https:// 开头'
              }
              return true
            },
          },
          {
            type: 'password',
            name: 'apiKey',
            message: 'API 密钥 (留空保持不变):',
            mask: '*',
          },
        ])

        const updates: { name?: string; baseUrl?: string; apiKey?: string } = {}
        if (answers.name && answers.name !== provider.name) updates.name = answers.name
        if (answers.baseUrl && answers.baseUrl !== provider.baseUrl) updates.baseUrl = answers.baseUrl
        if (answers.apiKey) updates.apiKey = answers.apiKey

        if (Object.keys(updates).length === 0) {
          console.log(chalk.gray('\n未做任何修改\n'))
          return
        }

        const updated = manager.edit(targetId, updates)

        console.log()
        console.log(chalk.green('✅ 编辑成功'))
        console.log()
        console.log(`  ${chalk.bold(updated.name)} ${chalk.blue('[Claude Code]')}`)
        console.log(`  ${chalk.gray(`ID: ${updated.id}`)}`)
        console.log(`  ${chalk.gray(`URL: ${updated.baseUrl}`)}`)
        console.log()
      } catch (error) {
        console.error(chalk.red(`\n❌ ${(error as Error).message}\n`))
        process.exit(1)
      }
    })
}
